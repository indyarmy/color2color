{"version":3,"file":"colorcolor.js","sources":["../src/colorcolor.ts"],"sourcesContent":["import {\r\n\tColorDefinitions,\r\n\tColorName,\r\n\tColorType,\r\n\tHsl,\r\n\tHsv,\r\n} from './color-definitions';\r\nimport * as namedColors from './css-color-names.json';\r\nimport {\r\n\tAlphaPrecision,\r\n\tcalculateOpacityFromWhite,\r\n\tnumberToHex,\r\n\trgbToHsl,\r\n\trgbToHsv,\r\n} from './utilities';\r\n\r\nconst LowerDecimalLimit = 0;\r\nconst UpperDecimalLimit = 255;\r\nconst UpperOpacityLimit = 1;\r\n\r\n/**\r\n * Convert a color string in any valid CSS format (RGB, RGBA, Hex, HexA, HSL, HSLA, HSB, or HSB) into another format.\r\n *\r\n * @example\r\n * // returns 'rgba(35,189,0,1)'\r\n * colorcolor('hsla(109,100%,37%,1)');\r\n * @example\r\n * // returns 'rgba(0,255,128,0.1333)'\r\n * colorcolor('#dfe', 'rgba', true);\r\n *\r\n * @param originalColor The CSS color value that needs to be converted\r\n * @param targetColor The CSS color type to convert to\r\n * @param calculateOpacity If the target color has an opacity value (HexA, HSLA, or RGBA), the result will be correct if viewed against a white background\r\n */\r\nexport const colorcolor = (\r\n\toriginalColor: string,\r\n\ttargetColor: ColorType = ColorName.RGBA,\r\n\tcalculateOpacity = false,\r\n): string => {\r\n\tlet a = 0;\r\n\tlet b = 0;\r\n\tlet convertedColor = originalColor.toLowerCase();\r\n\tlet g = 0;\r\n\tlet hsb: Hsv;\r\n\tlet hsl: Hsl;\r\n\tlet hsv: Hsv;\r\n\tlet r = 0;\r\n\tlet returnedColor: string;\r\n\r\n\t// convert named color to hex\r\n\tif (Object.prototype.hasOwnProperty.call(namedColors, convertedColor)) {\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment\r\n\t\tconvertedColor = (namedColors as never)[convertedColor];\r\n\t}\r\n\r\n\t// Search the color definitions for a match\r\n\tfor (const colorDefinition in ColorDefinitions) {\r\n\t\tif (Object.prototype.hasOwnProperty.call(ColorDefinitions, colorDefinition)) {\r\n\t\t\tconst { re } = ColorDefinitions[colorDefinition];\r\n\t\t\tconst bits = re.exec(convertedColor);\r\n\r\n\t\t\tif (bits) {\r\n\t\t\t\tconst channels = ColorDefinitions[colorDefinition].toRGBA(bits);\r\n\t\t\t\t[r, g, b] = channels;\r\n\t\t\t\ta = +(`${Math.round(+`${channels[3]}e+${AlphaPrecision}`)}e-${AlphaPrecision}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tr = Math.round((r < LowerDecimalLimit || isNaN(r)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((r > UpperDecimalLimit) ? UpperDecimalLimit : r));\r\n\tg = Math.round((g < LowerDecimalLimit || isNaN(g)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((g > UpperDecimalLimit) ? UpperDecimalLimit : g));\r\n\tb = Math.round((b < LowerDecimalLimit || isNaN(b)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((b > UpperDecimalLimit) ? UpperDecimalLimit : b));\r\n\ta = (a < LowerDecimalLimit || isNaN(a)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((a > UpperOpacityLimit) ? UpperOpacityLimit : a);\r\n\r\n\tswitch (targetColor) {\r\n\t\tcase ColorName.HEX:\r\n\t\t\treturnedColor = `#${numberToHex(r)}${numberToHex(g)}${numberToHex(b)}`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HEXA:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\treturnedColor = `#${numberToHex(r)}${numberToHex(g)}${numberToHex(b)}${numberToHex(Math.round(UpperDecimalLimit * a))}`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSB:\r\n\t\t\thsb = rgbToHsv(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsb(${hsb.h},${hsb.s}%,${hsb.v}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSL:\r\n\t\t\thsl = rgbToHsl(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsl(${hsl.h},${hsl.s}%,${hsl.l}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSLA:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\thsl = rgbToHsl(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsla(${hsl.h},${hsl.s}%,${hsl.l}%,${hsl.a})`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSV:\r\n\t\t\thsv = rgbToHsv(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsv(${hsv.h},${hsv.s}%,${hsv.v}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.RGB:\r\n\t\t\treturnedColor = `rgb(${r},${g},${b})`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.RGBA:\r\n\t\t// falls through as default\r\n\t\tdefault:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\treturnedColor = `rgba(${r},${g},${b},${a})`;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn returnedColor;\r\n};\r\n"],"names":[],"mappings":"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"}