{"version":3,"file":"colorcolor.js","sources":["../src/utilities.ts","../src/color-definitions.ts","../src/colorcolor.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-magic-numbers */\r\nimport { Hsl, Hsv, Rgb, Rgba } from './color-definitions';\r\n\r\nexport const AlphaPrecision = 4;\r\nconst HexRadix = 16;\r\nconst MaxDegrees = 360;\r\nconst MaxFixed = 0;\r\nconst MaxPercent = 100;\r\nconst MaxRgb = 255;\r\nconst MaxRgbRange = 256;\r\nconst MinOpacity = 0;\r\nconst MinPercent = 0;\r\nconst Precision = 1;\r\n\r\n/**\r\n * Modifies the RGB values to be accurate when displayed on a white background.\r\n *\r\n * @param r Red decimal value\r\n * @param g Green decimal value\r\n * @param b Blue decimal value\r\n */\r\nexport const calculateOpacityFromWhite = (r: number, g: number, b: number): number[] => {\r\n\tconst min = Math.min(r, g, b);\r\n\tconst calculatedAlpha = (MaxRgb - min) / MaxRgb;\r\n\r\n\treturn [\r\n\t\t+( MinOpacity || ( r - min ) / calculatedAlpha ).toFixed(MaxFixed),\r\n\t\t+( MinOpacity || ( g - min ) / calculatedAlpha ).toFixed(MaxFixed),\r\n\t\t+( MinOpacity || ( b - min ) / calculatedAlpha ).toFixed(MaxFixed),\r\n\t\tparseFloat(calculatedAlpha.toFixed(AlphaPrecision)),\r\n\t];\r\n}\r\n\r\n/**\r\n * Convert an HSL color value to the RGB equivalent.\r\n *\r\n * @param bits The result of a regular expression that captures the four components of an HSL color value\r\n */\r\nexport const hslToRgb = (bits: string[]): Rgba => {\r\n\tconst hsl: Hsl = {\r\n\t\th: +bits[1] / MaxDegrees,\r\n\t\ts: +bits[2] / MaxPercent,\r\n\t\tl: +bits[3] / MaxPercent,\r\n\t\ta: parseFloat(bits[ 4 ]),\r\n\t};\r\n\tconst rgba: Rgba = {\r\n\t\tr: 0,\r\n\t\tg: 0,\r\n\t\tb: 0,\r\n\t\ta: 0,\r\n\t};\r\n\r\n\tif (hsl.s === MinPercent) {\r\n\t\tconst v = MaxRgb * hsl.l;\r\n\t\trgba.r = v;\r\n\t\trgba.g = v;\r\n\t\trgba.b = v;\r\n\t\trgba.a = hsl.a;\r\n\t} else {\r\n\t\tconst q = hsl.l < 0.5 ? hsl.l * ( 1 + hsl.s ) : ( hsl.l + hsl.s ) - ( hsl.l * hsl.s );\r\n\t\tconst p = 2 * hsl.l - q;\r\n\t\trgba.r = +(hueToRgb(p, q, hsl.h + ( 1 / 3 ) ) * MaxRgb).toFixed(MaxFixed);\r\n\t\trgba.g = +(hueToRgb(p, q, hsl.h) * MaxRgb).toFixed(MaxFixed);\r\n\t\trgba.b = +(hueToRgb(p, q, hsl.h - ( 1 / 3 ) ) * MaxRgb).toFixed(MaxFixed);\r\n\t\trgba.a = hsl.a;\r\n\t}\r\n\r\n\treturn rgba;\r\n};\r\n\r\n/**\r\n * Convert an HSV color value to the RGB equivalent.\r\n *\r\n * @param bits The result of a regular expression that captures the three components of an HSV color value\r\n */\r\nexport const hsvToRgb = (bits: string[]): Rgb => {\r\n\tconst rgb: Rgb = {\r\n\t\tr: 0,\r\n\t\tg: 0,\r\n\t\tb: 0,\r\n\t};\r\n\tconst hsv: Hsv = {\r\n\t\th: +bits[1] / MaxDegrees,\r\n\t\ts: +bits[2] / MaxPercent,\r\n\t\tv: +bits[3] / MaxPercent,\r\n\t};\r\n\tconst i = Math.floor(hsv.h * 6);\r\n\tconst f = hsv.h * 6 - i;\r\n\tconst p = hsv.v * ( 1 - hsv.s );\r\n\tconst q = hsv.v * ( 1 - f * hsv.s );\r\n\tconst t = hsv.v * ( 1 - ( 1 - f ) * hsv.s );\r\n\r\n\tswitch (i % 6) {\r\n\t\tcase 0:\r\n\t\t\trgb.r = hsv.v;\r\n\t\t\trgb.g = t;\r\n\t\t\trgb.b = p;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\trgb.r = q;\r\n\t\t\trgb.g = hsv.v;\r\n\t\t\trgb.b = p;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\trgb.r = p;\r\n\t\t\trgb.g = hsv.v;\r\n\t\t\trgb.b = t;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\trgb.r = p;\r\n\t\t\trgb.g = q;\r\n\t\t\trgb.b = hsv.v;\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\trgb.r = t;\r\n\t\t\trgb.g = p;\r\n\t\t\trgb.b = hsv.v;\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\trgb.r = hsv.v;\r\n\t\t\trgb.g = p;\r\n\t\t\trgb.b = q;\r\n\t\t\tbreak;\r\n\t}\r\n\trgb.r = +(rgb.r * MaxRgb).toFixed(MaxFixed);\r\n\trgb.g = +(rgb.g * MaxRgb).toFixed(MaxFixed);\r\n\trgb.b = +(rgb.b * MaxRgb).toFixed(MaxFixed);\r\n\r\n\treturn rgb;\r\n}\r\n\r\n/**\r\n * Converts a given hue (from an HSL color) to the RGB decimal value.\r\n *\r\n * @param p\r\n * @param q\r\n * @param originalT\r\n */\r\nconst hueToRgb = (p: number, q: number, originalT: number): number => {\r\n\tlet t = 0;\r\n\r\n\tif (originalT < 0) {\r\n\t\tt += 1;\r\n\t}\r\n\tif (originalT > 1) {\r\n\t\tt -= 1;\r\n\t}\r\n\tif (t < 1 / 6) {\r\n\t\treturn p + ( q - p ) * 6 * t;\r\n\t}\r\n\tif (t < 1 / 2) {\r\n\t\treturn q;\r\n\t}\r\n\tif (t < 2 / 3) {\r\n\t\treturn p + ( q - p ) * ( ( 2 / 3 - t ) * 6 );\r\n\t}\r\n\r\n\treturn p;\r\n};\r\n\r\n/**\r\n * Converts decimal to hexadecimal, ensuring a leading 0 if the result is a single digit.\r\n *\r\n * @param n\r\n */\r\nexport const numberToHex = (n: number): string => `0${n.toString(HexRadix)}`.slice(-2);\r\n\r\n/**\r\n * Convert an RGB color to an HSL color.\r\n *\r\n * @param r Red decimal value\r\n * @param g Green decimal value\r\n * @param b Blue decimal value\r\n * @param a Opacity float value\r\n */\r\nexport const rgbToHsl = (r: number, g: number, b: number, a: number): Hsl => {\r\n\tconst rgba: Rgba = {\r\n\t\tr: r / MaxRgb,\r\n\t\tg: g / MaxRgb,\r\n\t\tb: b / MaxRgb,\r\n\t\ta,\r\n\t};\r\n\tconst max = Math.max(rgba.r, rgba.g, rgba.b);\r\n\tconst min = Math.min(rgba.r, rgba.g, rgba.b);\r\n\tconst diff = max - min;\r\n\tconst hsl: Hsl = {\r\n\t\th: 0,\r\n\t\ts: 0,\r\n\t\tl: ( max + min ) / 2,\r\n\t\ta: rgba.a,\r\n\t};\r\n\r\n\tif (max !== min) {\r\n\t\thsl.s = hsl.l >= 0.5 ? diff / ( 2 - max - min ) : diff / ( max + min );\r\n\t\tswitch (max) {\r\n\t\t\tcase rgba.r:\r\n\t\t\t\thsl.h = ( rgba.g - rgba.b ) / diff + ( rgba.g < rgba.b ? 6 : 0 );\r\n\t\t\t\tbreak;\r\n\t\t\tcase rgba.g:\r\n\t\t\t\thsl.h = ( rgba.b - rgba.r ) / diff + 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase rgba.b:\r\n\t\t\t\thsl.h = ( rgba.r - rgba.g ) / diff + 4;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\thsl.h /= 6;\r\n\t}\r\n\thsl.h = parseFloat(( hsl.h * MaxDegrees ).toFixed(Precision));\r\n\thsl.s = parseFloat(( hsl.s * MaxPercent ).toFixed(Precision));\r\n\thsl.l = parseFloat(( hsl.l * MaxPercent ).toFixed(Precision));\r\n\r\n\treturn hsl;\r\n}\r\n\r\n/**\r\n * Convert an RGB color to an HSV color.\r\n *\r\n * @param r Red decimal value\r\n * @param g Green decimal value\r\n * @param b Blue decimal value\r\n * @param a Opacity float value\r\n */\r\nexport const rgbToHsv = (r: number, g: number, b: number, a: number): Hsv => {\r\n\tconst rgba: Rgba = {\r\n\t\tr: toPercent(r % MaxRgbRange, MaxRgbRange),\r\n\t\tg: toPercent(g % MaxRgbRange, MaxRgbRange),\r\n\t\tb: toPercent(b % MaxRgbRange, MaxRgbRange),\r\n\t\ta,\r\n\t};\r\n\tconst max = Math.max(rgba.r, rgba.g, rgba.b);\r\n\tconst min = Math.min(rgba.r, rgba.g, rgba.b);\r\n\tconst diff = max - min;\r\n\tconst hsv: Hsv = {\r\n\t\th: 0,\r\n\t\ts: max === MinPercent ? MinPercent : diff / max,\r\n\t\tv: max,\r\n\t};\r\n\r\n\tif (max !== min) {\r\n\t\tswitch (max) {\r\n\t\t\tcase rgba.r:\r\n\t\t\t\thsv.h = ( rgba.g - rgba.b ) / diff + ( rgba.g < rgba.b ? 6 : MinPercent );\r\n\t\t\t\tbreak;\r\n\t\t\tcase rgba.g:\r\n\t\t\t\thsv.h = ( rgba.b - rgba.r ) / diff + 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase rgba.b:\r\n\t\t\t\thsv.h = ( rgba.r - rgba.g ) / diff + 4;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\thsv.h /= 6;\r\n\t}\r\n\thsv.h = parseFloat(( hsv.h * MaxDegrees ).toFixed(Precision));\r\n\thsv.s = parseFloat(( hsv.s * MaxPercent ).toFixed(Precision));\r\n\thsv.v = parseFloat(( hsv.v * MaxPercent ).toFixed(Precision));\r\n\r\n\treturn hsv;\r\n};\r\n\r\n/**\r\n * Gives the percent as a value between 0 and 1.\r\n *\r\n * @param amount\r\n * @param limit\r\n */\r\nconst toPercent = (amount: number, limit: number) => amount / limit;\r\n","import { hslToRgb, hsvToRgb } from './utilities';\r\n\r\ninterface ColorDefinition {\r\n\texample: string[];\r\n\tre: RegExp;\r\n\ttoRGBA(bits: string[]): number[];\r\n}\r\n\r\ninterface ColorDefinitions {\r\n\t[key: string]: ColorDefinition;\r\n}\r\n\r\nexport enum ColorName {\r\n\tHEX = 'hex',\r\n\tHEXA = 'hexa',\r\n\tHSL = 'hsl',\r\n\tHSLA = 'hsla',\r\n\tHSB = 'hsb',\r\n\tHSV = 'hsv',\r\n\tRGB = 'rgb',\r\n\tRGBA = 'rgba',\r\n}\r\n\r\nexport type ColorType = `${ColorName}`;\r\n\r\nexport type Hsl = {\r\n\th: number;\r\n\ts: number;\r\n\tl: number;\r\n\ta: number;\r\n}\r\n\r\nexport type Hsv = {\r\n\th: number;\r\n\ts: number;\r\n\tv: number;\r\n}\r\n\r\nexport type Rgb = {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n};\r\n\r\nexport type Rgba = {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n\ta: number;\r\n};\r\n\r\nconst DecimalRadix = 10;\r\nconst HexRadix = 16;\r\nconst MaxOpacity = 1;\r\nconst MaxOpacitySteps = 255;\r\n\r\nconst RedIndex = 1;\r\nconst GreenIndex = 2;\r\nconst BlueIndex = 3;\r\nconst AlphaIndex = 4;\r\n\r\nexport const ColorDefinitions: ColorDefinitions = {\r\n\t'hex': {\r\n\t\texample: ['#00ff00', '#336699'],\r\n\t\tre: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex], HexRadix),\r\n\t\t\tparseInt(bits[GreenIndex], HexRadix),\r\n\t\t\tparseInt(bits[BlueIndex], HexRadix),\r\n\t\t\tMaxOpacity,\r\n\t\t],\r\n\t},\r\n\t'hex3': {\r\n\t\texample: ['#0f0', '#369'],\r\n\t\tre: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex] + bits[RedIndex], HexRadix),\r\n\t\t\tparseInt(bits[GreenIndex] + bits[GreenIndex], HexRadix),\r\n\t\t\tparseInt(bits[BlueIndex] + bits[BlueIndex], HexRadix),\r\n\t\t\tMaxOpacity,\r\n\t\t],\r\n\t},\r\n\t'hexa': {\r\n\t\texample: ['#00ff00ff', '#336699a0'],\r\n\t\tre: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex], HexRadix),\r\n\t\t\tparseInt(bits[GreenIndex], HexRadix),\r\n\t\t\tparseInt(bits[BlueIndex], HexRadix),\r\n\t\t\tparseInt(bits[AlphaIndex], HexRadix) / MaxOpacitySteps,\r\n\t\t],\r\n\t},\r\n\t'hex4a': {\r\n\t\texample: ['#fb0f', '#f0f8'],\r\n\t\tre: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex] + bits[RedIndex], HexRadix),\r\n\t\t\tparseInt(bits[GreenIndex] + bits[GreenIndex], HexRadix),\r\n\t\t\tparseInt(bits[BlueIndex] + bits[BlueIndex], HexRadix),\r\n\t\t\tparseInt(bits[AlphaIndex] + bits[AlphaIndex], HexRadix) / MaxOpacitySteps,\r\n\t\t],\r\n\t},\r\n\t'hsb': {\r\n\t\texample: ['hsb(120, 100%, 25%)', 'hsb(0, 100%, 50%)'],\r\n\t\tre: /^hsb\\(\\s*(\\d*\\.?\\d+),\\s*(\\d*\\.?\\d+)%,\\s*(\\d*\\.?\\d+)%\\s*\\)$/,\r\n\t\ttoRGBA: bits => {\r\n\t\t\tconst rgb = hsvToRgb(bits);\r\n\r\n\t\t\treturn [\r\n\t\t\t\trgb.r,\r\n\t\t\t\trgb.g,\r\n\t\t\t\trgb.b,\r\n\t\t\t\tMaxOpacity,\r\n\t\t\t];\r\n\t\t},\r\n\t},\r\n\t'hsl': {\r\n\t\texample: ['hsl(120, 100%, 25%)', 'hsl(0, 100%, 50%)'],\r\n\t\tre: /^hsl\\(\\s*(\\d*\\.?\\d+),\\s*(\\d*\\.?\\d+)%,\\s*(\\d*\\.?\\d+)%\\s*\\)$/,\r\n\t\ttoRGBA: bits => {\r\n\t\t\tbits[AlphaIndex] = `${MaxOpacity}`;\r\n\t\t\tconst rgba = hslToRgb(bits);\r\n\r\n\t\t\treturn [\r\n\t\t\t\trgba.r,\r\n\t\t\t\trgba.g,\r\n\t\t\t\trgba.b,\r\n\t\t\t\trgba.a,\r\n\t\t\t];\r\n\t\t},\r\n\t},\r\n\t'hsla': {\r\n\t\texample: ['hsla(120, 100%, 25%, 1)', 'hsla(0, 100%, 50%, 0.5)'],\r\n\t\tre: /^hsla\\(\\s*(\\d*\\.?\\d+),\\s*(\\d*\\.?\\d+)%,\\s*(\\d*\\.?\\d+)%,\\s*(\\d+(?:\\.\\d+)?|\\.\\d+)\\s*\\)/,\r\n\t\ttoRGBA: bits => {\r\n\t\t\tconst rgba = hslToRgb(bits);\r\n\r\n\t\t\treturn [\r\n\t\t\t\trgba.r,\r\n\t\t\t\trgba.g,\r\n\t\t\t\trgba.b,\r\n\t\t\t\trgba.a,\r\n\t\t\t];\r\n\t\t},\r\n\t},\r\n\t'hsv': {\r\n\t\texample: ['hsv(120, 100%, 25%)', 'hsv(0, 100%, 50%)'],\r\n\t\tre: /^hsv\\(\\s*(\\d*\\.?\\d+),\\s*(\\d*\\.?\\d+)%,\\s*(\\d*\\.?\\d+)%\\s*\\)$/,\r\n\t\ttoRGBA: bits => {\r\n\t\t\tconst rgb = hsvToRgb(bits);\r\n\r\n\t\t\treturn [\r\n\t\t\t\trgb.r,\r\n\t\t\t\trgb.g,\r\n\t\t\t\trgb.b,\r\n\t\t\t\tMaxOpacity,\r\n\t\t\t];\r\n\t\t},\r\n\t},\r\n\t'rgb': {\r\n\t\texample: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\r\n\t\tre: /^rgb\\(\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\s*\\)$/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex], DecimalRadix),\r\n\t\t\tparseInt(bits[GreenIndex], DecimalRadix),\r\n\t\t\tparseInt(bits[BlueIndex], DecimalRadix),\r\n\t\t\tMaxOpacity,\r\n\t\t],\r\n\t},\r\n\t'rgba': {\r\n\t\texample: ['rgba(123, 234, 45, 1)', 'rgba(255,234,245, 0.5)'],\r\n\t\tre: /^rgba\\(\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d+(?:\\.\\d+)?|\\.\\d+)\\s*\\)/,\r\n\t\ttoRGBA: bits => [\r\n\t\t\tparseInt(bits[RedIndex], DecimalRadix),\r\n\t\t\tparseInt(bits[GreenIndex], DecimalRadix),\r\n\t\t\tparseInt(bits[BlueIndex], DecimalRadix),\r\n\t\t\tparseFloat(bits[AlphaIndex]),\r\n\t\t],\r\n\t},\r\n};\r\n","import {\r\n\tColorDefinitions,\r\n\tColorName,\r\n\tColorType,\r\n\tHsl,\r\n\tHsv,\r\n} from './color-definitions';\r\nimport * as namedColors from './css-color-names.json';\r\nimport {\r\n\tAlphaPrecision,\r\n\tcalculateOpacityFromWhite,\r\n\tnumberToHex,\r\n\trgbToHsl,\r\n\trgbToHsv,\r\n} from './utilities';\r\n\r\nconst LowerDecimalLimit = 0;\r\nconst UpperDecimalLimit = 255;\r\nconst UpperOpacityLimit = 1;\r\n\r\n/**\r\n * Convert a color string in any valid CSS format (RGB, RGBA, Hex, HexA, HSL, HSLA, HSB, or HSB) into another format.\r\n *\r\n * @example\r\n * // returns 'rgba(35,189,0,1)'\r\n * colorcolor('hsla(109,100%,37%,1)');\r\n * @example\r\n * // returns 'rgba(0,255,128,0.1333)'\r\n * colorcolor('#dfe', 'rgba', true);\r\n *\r\n * @param originalColor The CSS color value that needs to be converted\r\n * @param targetColor The CSS color type to convert to\r\n * @param calculateOpacity If the target color has an opacity value (HexA, HSLA, or RGBA), the result will be correct if viewed against a white background\r\n */\r\nexport const colorcolor = (\r\n\toriginalColor: string,\r\n\ttargetColor: ColorType = ColorName.RGBA,\r\n\tcalculateOpacity = false,\r\n): string => {\r\n\tlet a = 0;\r\n\tlet b = 0;\r\n\tlet convertedColor = originalColor.toLowerCase();\r\n\tlet g = 0;\r\n\tlet hsb: Hsv;\r\n\tlet hsl: Hsl;\r\n\tlet hsv: Hsv;\r\n\tlet r = 0;\r\n\tlet returnedColor: string;\r\n\r\n\t// convert named color to hex\r\n\tif (Object.prototype.hasOwnProperty.call(namedColors, convertedColor)) {\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment\r\n\t\tconvertedColor = (namedColors as never)[convertedColor];\r\n\t}\r\n\r\n\t// Search the color definitions for a match\r\n\tfor (const colorDefinition in ColorDefinitions) {\r\n\t\tif (Object.prototype.hasOwnProperty.call(ColorDefinitions, colorDefinition)) {\r\n\t\t\tconst { re } = ColorDefinitions[colorDefinition];\r\n\t\t\tconst bits = re.exec(convertedColor);\r\n\r\n\t\t\tif (bits) {\r\n\t\t\t\tconst channels = ColorDefinitions[colorDefinition].toRGBA(bits);\r\n\t\t\t\t[r, g, b] = channels;\r\n\t\t\t\ta = +(`${Math.round(+`${channels[3]}e+${AlphaPrecision}`)}e-${AlphaPrecision}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tr = Math.round((r < LowerDecimalLimit || isNaN(r)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((r > UpperDecimalLimit) ? UpperDecimalLimit : r));\r\n\tg = Math.round((g < LowerDecimalLimit || isNaN(g)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((g > UpperDecimalLimit) ? UpperDecimalLimit : g));\r\n\tb = Math.round((b < LowerDecimalLimit || isNaN(b)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((b > UpperDecimalLimit) ? UpperDecimalLimit : b));\r\n\ta = (a < LowerDecimalLimit || isNaN(a)) ?\r\n\t\tLowerDecimalLimit :\r\n\t\t((a > UpperOpacityLimit) ? UpperOpacityLimit : a);\r\n\r\n\tswitch (targetColor) {\r\n\t\tcase ColorName.HEX:\r\n\t\t\treturnedColor = `#${numberToHex(r)}${numberToHex(g)}${numberToHex(b)}`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HEXA:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\treturnedColor = `#${numberToHex(r)}${numberToHex(g)}${numberToHex(b)}${numberToHex(Math.round(UpperDecimalLimit * a))}`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSB:\r\n\t\t\thsb = rgbToHsv(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsb(${hsb.h},${hsb.s}%,${hsb.v}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSL:\r\n\t\t\thsl = rgbToHsl(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsl(${hsl.h},${hsl.s}%,${hsl.l}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSLA:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\thsl = rgbToHsl(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsla(${hsl.h},${hsl.s}%,${hsl.l}%,${hsl.a})`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.HSV:\r\n\t\t\thsv = rgbToHsv(r, g, b, a);\r\n\r\n\t\t\treturnedColor = `hsv(${hsv.h},${hsv.s}%,${hsv.v}%)`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.RGB:\r\n\t\t\treturnedColor = `rgb(${r},${g},${b})`;\r\n\t\t\tbreak;\r\n\t\tcase ColorName.RGBA:\r\n\t\t// falls through as default\r\n\t\tdefault:\r\n\t\t\tif (calculateOpacity) {\r\n\t\t\t\t[r, g, b, a] = calculateOpacityFromWhite(r, g, b);\r\n\t\t\t}\r\n\r\n\t\t\treturnedColor = `rgba(${r},${g},${b},${a})`;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn returnedColor;\r\n};\r\n"],"names":["HexRadix"],"mappings":"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"}